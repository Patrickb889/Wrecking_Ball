/* ========================================================= //<>//
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:703461:
  appc.background(230);
} //_CODE_:window1:703461:

public void speedSliderChange(GSlider source, GEvent event) { //_CODE_:speedSlider:699606:
  wreckingBall.speed = speedSlider.getValueF();
} //_CODE_:speedSlider:699606:

public void weightSliderChange(GSlider source, GEvent event) { //_CODE_:weightSlider:729997:
  wreckingBall.weight = weightSlider.getValueF();
} //_CODE_:weightSlider:729997:

public void swingButtonClicked(GButton source, GEvent event) { //_CODE_:swingButton:962731:
  wreckingBall.swingMode = 1;
} //_CODE_:swingButton:962731:

public void highlightingButtonClicked(GButton source, GEvent event) { //_CODE_:highlightingButton:721772:
  if(bricksHighlighted == false) { 
   bricksHighlighted = true;
   highlightingButton.setText("Unhighlight Bricks");
   highlight();
  }
  
  else {
   bricksHighlighted = false;
   highlightingButton.setText("Highlight Bricks");
   unhighlight();
  }
} //_CODE_:highlightingButton:721772:

public void resetButtonClicked(GButton source, GEvent event) { //_CODE_:resetButton:820601:
  setUpBricks();
} //_CODE_:resetButton:820601:

public void sizeSliderChange(GSlider source, GEvent event) { //_CODE_:sizeSlider:487556:
  wreckingBall.size = sizeSlider.getValueF();;
} //_CODE_:sizeSlider:487556:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 300, 400, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  speedSlider = new GSlider(window1, 50, 130, 200, 50, 10.0);
  speedSlider.setShowValue(true);
  speedSlider.setShowLimits(true);
  speedSlider.setLimits(2.5, 1.0, 5.0);
  speedSlider.setShowTicks(true);
  speedSlider.setNumberFormat(G4P.DECIMAL, 2);
  speedSlider.setOpaque(false);
  speedSlider.addEventHandler(this, "speedSliderChange");
  speedLabel = new GLabel(window1, 110, 110, 80, 20);
  speedLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  speedLabel.setText("SPEED");
  speedLabel.setOpaque(false);
  weightSlider = new GSlider(window1, 50, 210, 200, 50, 10.0);
  weightSlider.setShowValue(true);
  weightSlider.setShowLimits(true);
  weightSlider.setLimits(550.0, 100.0, 1000.0);
  weightSlider.setShowTicks(true);
  weightSlider.setNumberFormat(G4P.DECIMAL, 2);
  weightSlider.setOpaque(false);
  weightSlider.addEventHandler(this, "weightSliderChange");
  weightLabel = new GLabel(window1, 110, 190, 80, 20);
  weightLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  weightLabel.setText("WEIGHT");
  weightLabel.setOpaque(false);
  swingButton = new GButton(window1, 110, 340, 80, 40);
  swingButton.setText("SWING!");
  swingButton.addEventHandler(this, "swingButtonClicked");
  highlightingButton = new GButton(window1, 42, 280, 80, 40);
  highlightingButton.setText("Highlight Bricks");
  highlightingButton.addEventHandler(this, "highlightingButtonClicked");
  resetButton = new GButton(window1, 180, 280, 80, 40);
  resetButton.setText("Reset");
  resetButton.addEventHandler(this, "resetButtonClicked");
  label1 = new GLabel(window1, 110, 380, 80, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("press space");
  label1.setOpaque(false);
  sizeSlider = new GSlider(window1, 50, 50, 200, 50, 10.0);
  sizeSlider.setShowValue(true);
  sizeSlider.setShowLimits(true);
  sizeSlider.setLimits(100.0, 50.0, 150.0);
  sizeSlider.setShowTicks(true);
  sizeSlider.setNumberFormat(G4P.DECIMAL, 2);
  sizeSlider.setOpaque(false);
  sizeSlider.addEventHandler(this, "sizeSliderChange");
  label2 = new GLabel(window1, 110, 30, 80, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("SIZE");
  label2.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GSlider speedSlider; 
GLabel speedLabel; 
GSlider weightSlider; 
GLabel weightLabel; 
GButton swingButton; 
GButton highlightingButton; 
GButton resetButton; 
GLabel label1; 
GSlider sizeSlider; 
GLabel label2; 
